#lang scribble/sigplan @nocopyright

@require{literacy.rkt}
@require{graphviz.rkt}

@;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
@handbook-title/pkg-desc[]

@abstract{代码降临节（Advent of Code）是始于2015年的年度编程挑战活动，
 也是圣诞日历文化在科技圈的延伸。活动每年12月1日开始，由一个或一系列虚构的故事引出，
 参与者每天用代码解两个谜题，一直到圣诞节当天结束，共计25天50个谜题。
 虽然活动发生在每年的最后一个月，但出题人事先要花4-5个月（的业余时间）来准备；
 活动也不要求参与者一定要在规定时间内完成，以往的谜题也可以随时查看。

 此挑战活动不要求参与者有计算机科班背景，对语言、软件和硬件配置也没有要求。
 懂点编程基础知识、有一定的问题求解技巧即可开始。总之，青少练手、大学课程项目、
 面试热身、企业培训，等等等，各种级别的参与者都能从中找到价值。

 此活动的主旨只有一个：用代码迎接圣诞节的到来。你应该关注对你自己有意义的事，
 也即要对自己有认识、有目标、完全没必要随大流。比如，你可以尝试选用一些新语言来解谜，
 并注意比较新语言解这些谜题时有哪些优势和不足，自己学到东西才是合理的期待。

 不过，初学者肯定很难做到随便选一门新语言就开干，而这就是跟我学编程的核心要义之一：
 我更关注帮你建立@bold{学习新语言}的元认知能力（推广到终身学习范畴，即@bold{像学神一样学习}的能力）。
 从现在开始，你会不断看到别人问“语言到底重不重要”，很明显这个问题的答案跟时间有关，
 你人生的不同阶段、你目标的不同都会有不同回答。所以，我不建议你去看别人的相关讨论，
 网络上“只见树木不见森林”的无效讨论太多了；时机到了，你能自己学会如何正确思考这个问题。

 25个谜题的难度是递进关系，有提交人数的变化趋势为证，因此你不用急着往世界积分榜上挤，
 那都是些能在几分钟到一个小时之内就秒杀谜题的怪物（跟考试、竞赛一样，任何竞技活动
 都需要专门训练和大量练习以成为该项活动的熟练工，而这显然不是我们参与此活动的目的）。}

@handbook-statistics[#:recursive? #false #:date-delta (* 3600 24)
                     #:gitstat-width 460 #:gitstat-radius 80 #:subgroups null
                     #:altcolors '(["Racket" . "Green"]
                                   ["Python" . "Khaki"])]

@handbook-smart-table[]

@include-section{magical.energy.expedition.scrbl}

@;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
@handbook-appendix[#:index-section? #true #:numbered? #false]
